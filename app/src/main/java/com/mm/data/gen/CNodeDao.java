package com.mm.data.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CNODE".
*/
public class CNodeDao extends AbstractDao<CNode, Long> {

    public static final String TABLENAME = "CNODE";

    /**
     * Properties of entity CNode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NodeID = new Property(1, Integer.class, "NodeID", false, "NODE_ID");
        public final static Property NodeName = new Property(2, String.class, "NodeName", false, "NODE_NAME");
        public final static Property Time = new Property(3, java.util.Date.class, "Time", false, "TIME");
    }


    public CNodeDao(DaoConfig config) {
        super(config);
    }
    
    public CNodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CNODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NODE_ID\" INTEGER," + // 1: NodeID
                "\"NODE_NAME\" TEXT," + // 2: NodeName
                "\"TIME\" INTEGER);"); // 3: Time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CNODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CNode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer NodeID = entity.getNodeID();
        if (NodeID != null) {
            stmt.bindLong(2, NodeID);
        }
 
        String NodeName = entity.getNodeName();
        if (NodeName != null) {
            stmt.bindString(3, NodeName);
        }
 
        java.util.Date Time = entity.getTime();
        if (Time != null) {
            stmt.bindLong(4, Time.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CNode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer NodeID = entity.getNodeID();
        if (NodeID != null) {
            stmt.bindLong(2, NodeID);
        }
 
        String NodeName = entity.getNodeName();
        if (NodeName != null) {
            stmt.bindString(3, NodeName);
        }
 
        java.util.Date Time = entity.getTime();
        if (Time != null) {
            stmt.bindLong(4, Time.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CNode readEntity(Cursor cursor, int offset) {
        CNode entity = new CNode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // NodeID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NodeName
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // Time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CNode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNodeID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNodeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CNode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CNode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CNode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
